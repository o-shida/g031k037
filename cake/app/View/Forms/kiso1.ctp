<h3>フレームワーク導入のメリットとデメリットについて</h3>
<h5>メリット</h5>
技術リスクを減らし、品質を向上させ、納期コストを抑えることができる点<br>
技術的な問題をフレームワークに任せることで、開発者は真に解決したいビジネス・ロジックの問題に専念できる<br>
半完成品であるため、工数の削減、開発リスクの回避、品質の向上が期待できる<br>
設計/APIの標準化により、保守やアプリケーション統合が容易になる<br>
フレームワークがセキュリティ要件への対応を済ませていることがある<br>
ノウハウを次の開発/保守に流用できる<br>
最先端の技術トレンドや高度な技術要件に素早く対応できる<br>
フレームワークを使用するメリットは、最も大きなレベルの再利用によって、先人の知見を最大限に活用できることにある。<br>
しかし、新規にフレームワークを構築することは、リスクが大きく、多大な投資となる<br>
既存のフレームワークを使うと、フレームワーク構築のリスクをとらず、
構築するよりもすくなり通しで、フレームワークのメリットを享受が可能。
<br><br>
<h5>デメリット</h5>
使いこなすためには学習コストがかかる<br>
フレームワークの決まりに従って、開発しなければならないので、開発時には一定の工数がかかる<br>
フレームワークを使うアプリケーションの安定性が、フレームワークの安定性に左右されやすいこと。<br>
フレームワーク利用者が「フレームワーク病」にかかってしまいがちであること<br>
<h5>※フレームワーク病とは</h5>
フレームワークを使用したアプリケーションの拡張は、フレームワークが提供する拡張の仕組みに従った形で行う必要があります。<br>その拡張の仕組みが仏雑であればあるほど、アプリケーションの拡張にかかるコストが大きくなってしまいます。拡張の仕組みが複雑なフレームワークでは，ほんの少しの拡張であったとしても，拡張コードそのものを書く時間よりも，その仕組みに従った形にすることに，より多くの時間が掛かってしまうことになりかねません。これが「フレームワーク病」の症状である。<br>
<br>
<br>
<h3>PHPフレームワーク</h3>
<h2>Laravel</h2>
Laraelは柔軟性と読み書きしやすさを重視した、パワフルなフレームワークである。<br>
Laravelには他のフレームワークと違った特徴を数多く持っている。<br>
<h5>バンドル</h5>：Laravelのモジュールパッキングシステムである。 <br>
Laravelバンドルリポジトリー は、アプリケーションへ簡単に機能を付け加えられるように、予め用意されている。 バンドルリポジトリーからbundlesディレクトリーにダウンロードしても良いですし、"Artisan"コマンドラインツールを使い、自動的にインストールすることもできる。<br>
<h5>Eloquent ORM</h5>：最も進化したPHPアクティブレコードを実装している。 リレーションシップとネストされたeagerローディングで簡単に制約を適用できる能力を使えば、自分のデーターを完全にコントロールでき、アクティブレコードの便利さを十分に体験できるでしょう。 EloquentはLaravelのクエリービルダーであるFluentのメソッドを完全にサポートしている。<br>
<h5>Restコントローラー</h5>：GETとPOSTのロジックを分ける一つの手法です。 例えばログインにおいて、コントローラーのget_login()アクションでフォームを担当させ、コントローラーのpost_login()アクションで、送信されたフォームを受け取り、バリデーションし、エラーメッセージと一緒にログインフォームにリダイレクトさせたり、各ユーザーのダッシュボードにリダイレクトさせたりできます。<br><br>
<h2>symfony</h2>
symfonyは世界的に使用されているフレームワークであり、開発当初から活発なアップデートが行われています。世界規模で見た場合、最も注目されているフレームワークの一つと言えます。symfonyは、二つのフレームワークの利点を引き継いでいる。一つは、一時注目を集めたMojaviの「MVC機能」。もう一つは、Ruby言語のフレームワークとして評価の高いRuby on Railsの「圧倒的な開発効率を実現するための機能」である。これらの利点を活かすことで、高い安定性とセキュリティの両面での強さを最小限の設定で発揮する。これまでPHPの弱みとされてきたオブジェクト指向を活かす工夫と、PHPの強みとされてきた処理速度とスケーラビリティの保持により、複数人での開発、すなわち大規模開発を優位に進めることができる。1以降に対応しており、キャッシュ管理や多言語対応、AjaxサポートといったWeb アプリケーションを作成する際に必要となってくる機能の多くがはじめから用意され、その他の機能も簡単に追加できるプラグインを使って拡張できるのが特徴である。<br>
<h5>マイクロフレームワーク</h5>
symfonyのマイクロフレームワークはsilexといい、これはsymfony2でも使用しているコンポーネント類の一部を利用している。<br>
<h2>CodeIgniter</h2>
CodeIgniter(コードイグナイター)はPHPを用いて動的Webサイトを構築するために利用するオープンソースのWebアプリケーションフレームワークである。 CodeIgniterには、一般に必要とされるプログラミングタスクに対する豊富なライブラリが用意されているだけでなく、それらのライブラリにアクセスするためのシンプルなインターフェースと論理的な構造が用意されている。開発者はこれらが備わったCodeIgniterを用いることで、より短時間でアプリケーションを構築することができる。<br>
特徴としてはPHP 5.1.6 以上で動作する（PHP 4 のサポートは Version 1.7.2 まで）<br>
極めて軽量<br>
複数のデータベースプラットフォームをサポート<br>
Formとデータの検証（Validation)<br>
セキュリティと XSSフィルタリング<br>
セッション管理<br>
などがあげられる<br>
<br>
<h3>Ruby on Rails</h3>
Ruby on Rails（ルビーオンレイルズ）は、オープンソースのWebアプリケーションフレームワークである。RoRまたは単にRailsと呼ばれる。その名にも示されているようにRubyで書かれている。またModel View Controller（MVC）アーキテクチャに基づいて構築されている。
特徴として、MerbのプロジェクトはRuby on Railsのコントローラースタックにおけるクリーンルーム実装として始められたが、Railsの精神や方法論から派生した数あるアイデアを組み込むまでに成長した。<br>
Merbはコンポーネントにモジュール性を持ち、伸張性のあるAPIデザインや垂直スケーラビリティを有している。MerbはRails以上にフレキシブルで処理が早いフレームワークにしようと考えられていた。<br>
<h5>MVCについて</h5>
モデル/ビュー/コントローラは頭文字を取ってMVCアーキテクチャーと呼ばれるもので、アプリケーションをモデル(データを扱う部分)、ビュー(ユーザーに見える結果を作る部分)、コントローラ(ユーザーからの要求を処理し、モデルやビューと連携を行なう)に分割して作りあげるものである。<br>
<h5>モデル</h5>リクエストが例えば登録済みのデータがみたいといったものや、新しいデータを格納して欲しいといったものの場合、データベースとのやり取りが発生する。<br>
Railsアプリケーションの場合、使用しているデータベースのテーブル毎にモデルが用意されています。利用者からのリクエストで呼び出されたアクションは、モデルを介してデータベースとのやり取りを行い、データを取得したり新しいデータを格納する場合がある。<br>
<h5>ビュー</h5>モデルを介して取得したデータを受け渡し用の変数にセットしビューを呼び出します。ビューは変数を介して渡されたデータを使ってHTML文書を作成しコントローラへ返す。
ビューはRailsアプリケーションの中に複数用意されています。1つ1つはHTML文書の雛形のようになっており、与えられたデータから文書を作成します。通常はアクションに対応するビューが一つ用意されているので自動的にそのビューが呼び出されて利用者へ返す文書を作成するのですが、呼び出すビューを指定することも可能である。<br>
<h5>コントローラ</h5>ビューによって作成されたHTML文書を受け取ったコントローラは、そのデータをリクエストを送信してきた利用者へ返す。<br><br>
<!-- <h5>参考文献</h5>
※１：フレームワーク導入のメリット：http://d.hatena.ne.jp/marie_leche/20070812<br>
※２：第一回フレームワークとは：http://gihyo.jp/dev/serial/01/piece/0001<br> -->